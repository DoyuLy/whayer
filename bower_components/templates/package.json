{
  "name": "templates",
  "description": "System for creating and managing template collections, and rendering templates with any node.js template engine. Can be used as the basis for creating a static site generator or blog framework.",
  "version": "0.17.2",
  "homepage": "https://github.com/jonschlinkert/templates",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonschlinkert/templates.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/templates/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "lib"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha",
    "ci": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "dependencies": {
    "array-sort": "^0.1.2",
    "async": "^1.5.2",
    "base": "^0.8.1",
    "base-data": "^0.4.4",
    "base-option": "^0.7.0",
    "base-plugins": "^0.4.10",
    "clone": "^1.0.2",
    "clone-stats": "0.0.1",
    "debug": "^2.2.0",
    "deep-bind": "^0.3.0",
    "define-property": "^0.2.5",
    "en-route": "^0.7.5",
    "engine-base": "^0.1.2",
    "engine-cache": "^0.16.1",
    "export-files": "^2.1.1",
    "extend-shallow": "^2.0.1",
    "falsey": "^0.3.0",
    "get-value": "^2.0.5",
    "get-view": "^0.1.1",
    "group-array": "^0.3.0",
    "has-glob": "^0.1.1",
    "has-value": "^0.3.1",
    "inflection": "^1.10.0",
    "layouts": "^0.11.0",
    "lazy-cache": "^2.0.1",
    "load-helpers": "^0.2.10",
    "match-file": "^0.2.0",
    "mixin-deep": "^1.1.3",
    "paginationator": "^0.1.3",
    "set-value": "^0.3.3",
    "template-error": "^0.1.2",
    "vinyl": "^1.1.1"
  },
  "devDependencies": {
    "ansi-red": "^0.1.1",
    "consolidate": "^0.14.0",
    "engine-handlebars": "^0.8.0",
    "ent": "^2.2.0",
    "event-stream": "^3.3.2",
    "find-pkg": "^0.1.1",
    "gulp": "^3.9.1",
    "gulp-eslint": "^2.0.0",
    "gulp-format-md": "^0.1.7",
    "gulp-istanbul": "^0.10.4",
    "gulp-mocha": "^2.2.0",
    "is-buffer": "^1.1.3",
    "kind-of": "^3.0.2",
    "mocha": "^2.4.5",
    "parser-front-matter": "^1.3.0",
    "remarkable": "^1.6.2",
    "resolve-glob": "^0.1.8",
    "should": "^8.3.1",
    "swig": "^1.4.2",
    "through2": "^2.0.1"
  },
  "keywords": [
    "compile",
    "consolidate",
    "engine",
    "engines",
    "haml-coffee",
    "handlebars",
    "helpers",
    "lodash",
    "process",
    "render",
    "template",
    "templates"
  ],
  "verb": {
    "toc": true,
    "layout": "default",
    "plugins": [
      "gulp-format-md"
    ],
    "related": {
      "list": [
        "assemble",
        "en-route",
        "engine",
        "layouts",
        "verb"
      ]
    },
    "reflinks": [
      "array-sort",
      "assemble",
      "base",
      "group-array",
      "paginationator",
      "base-data",
      "verb"
    ],
    "lint": {
      "reflinks": true
    }
  },
  "lintDeps": {
    "ignore": [
      "coverage"
    ]
  },
  "gitHead": "b8f521863c361ab45aab8f6e21822a6a2bde1611",
  "readme": "# templates [![NPM version](https://img.shields.io/npm/v/templates.svg?style=flat)](https://www.npmjs.com/package/templates) [![NPM downloads](https://img.shields.io/npm/dm/templates.svg?style=flat)](https://npmjs.org/package/templates) [![Build Status](https://img.shields.io/travis/jonschlinkert/templates.svg?style=flat)](https://travis-ci.org/jonschlinkert/templates)\n\nSystem for creating and managing template collections, and rendering templates with any node.js template engine. Can be used as the basis for creating a static site generator or blog framework.\n\n## TOC\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n  * [Common](#common)\n    + [.option](#option)\n    + [.use](#use)\n  * [App](#app)\n  * [Engines](#engines)\n  * [Helpers](#helpers)\n  * [Built-in helpers](#built-in-helpers)\n  * [View](#view)\n    + [View Data](#view-data)\n  * [Item](#item)\n    + [Item Data](#item-data)\n  * [Views](#views)\n    + [Views Data](#views-data)\n    + [Lookup methods](#lookup-methods)\n  * [Collections](#collections)\n  * [List](#list)\n  * [Group](#group)\n  * [Lookups](#lookups)\n  * [Rendering](#rendering)\n  * [Context](#context)\n  * [Routes and middleware](#routes-and-middleware)\n  * [is](#is)\n- [History](#history)\n- [Related projects](#related-projects)\n- [Contributing](#contributing)\n- [Building docs](#building-docs)\n- [Running tests](#running-tests)\n- [Author](#author)\n- [License](#license)\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install templates --save\n```\n\n**Features**\n\n* create custom view collections using `app.create('foo')`\n* register any template engine for rendering views\n* register helpers\n* partial support\n* plugins and middleware\n\n**Example**\n\nThis is just a very small glimpse at the `templates` API!\n\n```js\nvar templates = require('templates');\nvar app = templates();\n\n// create a collection\napp.create('pages');\n\n// add views to the collection\napp.page('a.html', {content: 'this is <%= foo %>'});\napp.page('b.html', {content: 'this is <%= bar %>'});\napp.page('c.html', {content: 'this is <%= baz %>'});\n\napp.pages.getView('a.html')\n  .render({foo: 'home'}, function (err, view) {\n    //=> 'this is home'\n  });\n```\n\n## Usage\n\n```js\nvar templates = require('templates');\nvar app = templates();\n```\n\n## API\n\n### Common\n\nThis section describes API features that are shared by all Templates classes.\n\n#### .option\n\nSet or get an option value.\n\n**Params**\n\n* `key` **{String|Object}**: Pass a key-value pair or an object to set.\n* `val` **{any}**: Any value when a key-value pair is passed. This can also be options if a glob pattern is passed as the first value.\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Example**\n\n```js\napp.option('a', 'b');\napp.option({c: 'd'});\nconsole.log(app.options);\n//=> {a: 'b', c: 'd'}\n```\n\n#### .use\n\nRun a plugin on the given instance. Plugins are invoked immediately upon instantiating in the order in which they were defined.\n\n**Example**\n\nThe simplest plugin looks something like the following:\n\n```js\napp.use(function(inst) {\n  // do something to `inst`\n});\n```\n\nNote that `inst` is the instance of the class you're instantiating. So if you create an instance of `Collection`, inst is the collection instance.\n\n**Params**\n\n* `fn` **{Function}**: Plugin function. If the plugin returns a function it will be passed to the `use` method of each item created on the instance.\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Usage**\n\n```js\ncollection.use(function(items) {\n  // `items` is the instance, as is `this`\n\n  // optionally return a function to be passed to\n  // the `.use` method of each item created on the\n  // instance\n  return function(item) {\n    // do stuff to each `item`\n  };\n});\n```\n\n### App\n\nAPI for the main `Templates` class.\n\n### [Templates](index.js#L46)\n\nThis function is the main export of the templates module. Initialize an instance of `templates` to create your application.\n\n**Params**\n\n* `options` **{Object}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar app = templates();\n```\n\n### [.list](index.js#L185)\n\nCreate a new list. See the [list docs](docs/lists.md) for more information about lists.\n\n**Params**\n\n* `opts` **{Object}**: List options\n* `returns` **{Object}**: Returns the `list` instance for chaining.\n\n**Example**\n\n```js\nvar list = app.list();\nlist.addItem('abc', {content: '...'});\n\n// or, create list from a collection\napp.create('pages');\nvar list = app.list(app.pages);\n```\n\n### [.collection](index.js#L224)\n\nCreate a new collection. Collections are decorated with special methods for getting and setting items from the collection. Note that, unlike the [create](#create) method, collections created with `.collection()` are not cached.\n\nSee the [collection docs](docs/collections.md) for more\ninformation about collections.\n\n**Params**\n\n* `opts` **{Object}**: Collection options\n* `returns` **{Object}**: Returns the `collection` instance for chaining.\n\n### [.create](index.js#L276)\n\nCreate a new view collection to be stored on the `app.views` object. See\nthe [create docs](docs/collections.md#create) for more details.\n\n**Params**\n\n* `name` **{String}**: The name of the collection to create. Plural or singular form may be used, as the inflections are automatically resolved when the collection is created.\n* `opts` **{Object}**: Collection options\n* `returns` **{Object}**: Returns the `collection` instance for chaining.\n\n### [.setup](index.js#L404)\n\nExpose static `setup` method for providing access to an instance before any other use code is run.\n\n**Params**\n\n* `app` **{Object}**: Application instance\n* `name` **{String}**: Optionally pass the constructor name to use.\n* `returns` **{undefined}**\n\n**Example**\n\n```js\nfunction App(options) {\n  Templates.call(this, options);\n  Templates.setup(this);\n}\nTemplates.extend(App);\n```\n\n***\n\n### [.engine](lib/plugins/engine.js#L33)\n\nRegister a view engine callback `fn` as `ext`.\n\n**Params**\n\n* `exts` **{String|Array}**: String or array of file extensions.\n* `fn` **{Function|Object}**: or `settings`\n* `settings` **{Object}**: Optionally pass engine options as the last argument.\n\n**Example**\n\n```js\napp.engine('hbs', require('engine-handlebars'));\n\n// using consolidate.js\nvar engine = require('consolidate');\napp.engine('jade', engine.jade);\napp.engine('swig', engine.swig);\n\n// get a registered engine\nvar swig = app.engine('swig');\n```\n\n***\n\n### [.helper](lib/plugins/helpers.js#L24)\n\nRegister a template helper.\n\n**Params**\n\n* `name` **{String}**: Helper name\n* `fn` **{Function}**: Helper function.\n\n**Example**\n\n```js\napp.helper('upper', function(str) {\n  return str.toUpperCase();\n});\n```\n\n### [.helpers](lib/plugins/helpers.js#L45)\n\nRegister multiple template helpers.\n\n**Params**\n\n* `helpers` **{Object|Array}**: Object, array of objects, or glob patterns.\n\n**Example**\n\n```js\napp.helpers({\n  foo: function() {},\n  bar: function() {},\n  baz: function() {}\n});\n```\n\n### [.getHelper](lib/plugins/helpers.js#L62)\n\nGet a previously registered helper.\n\n**Params**\n\n* `name` **{String}**: Helper name\n* `returns` **{Function}**: Returns the registered helper function.\n\n**Example**\n\n```js\nvar fn = app.getHelper('foo');\n```\n\n### [.getAsyncHelper](lib/plugins/helpers.js#L79)\n\nGet a previously registered async helper.\n\n**Params**\n\n* `name` **{String}**: Helper name\n* `returns` **{Function}**: Returns the registered helper function.\n\n**Example**\n\n```js\nvar fn = app.getAsyncHelper('foo');\n```\n\n### [.hasHelper](lib/plugins/helpers.js#L98)\n\nReturn true if sync helper `name` is registered.\n\n**Params**\n\n* `name` **{String}**: sync helper name\n* `returns` **{Boolean}**: Returns true if the sync helper is registered\n\n**Example**\n\n```js\nif (app.hasHelper('foo')) {\n  // do stuff\n}\n```\n\n### [.hasAsyncHelper](lib/plugins/helpers.js#L116)\n\nReturn true if async helper `name` is registered.\n\n**Params**\n\n* `name` **{String}**: Async helper name\n* `returns` **{Boolean}**: Returns true if the async helper is registered\n\n**Example**\n\n```js\nif (app.hasAsyncHelper('foo')) {\n  // do stuff\n}\n```\n\n### [.asyncHelper](lib/plugins/helpers.js#L134)\n\nRegister an async helper.\n\n**Params**\n\n* `name` **{String}**: Helper name.\n* `fn` **{Function}**: Helper function\n\n**Example**\n\n```js\napp.asyncHelper('upper', function(str, next) {\n  next(null, str.toUpperCase());\n});\n```\n\n### [.asyncHelpers](lib/plugins/helpers.js#L155)\n\nRegister multiple async template helpers.\n\n**Params**\n\n* `helpers` **{Object|Array}**: Object, array of objects, or glob patterns.\n\n**Example**\n\n```js\napp.asyncHelpers({\n  foo: function() {},\n  bar: function() {},\n  baz: function() {}\n});\n```\n\n### [.helperGroup](lib/plugins/helpers.js#L179)\n\nRegister a namespaced helper group.\n\n**Params**\n\n* `helpers` **{Object|Array}**: Object, array of objects, or glob patterns.\n\n**Example**\n\n```js\n// markdown-utils\napp.helperGroup('mdu', {\n  foo: function() {},\n  bar: function() {},\n});\n\n// Usage:\n// <%= mdu.foo() %>\n// <%= mdu.bar() %>\n```\n\n### Built-in helpers\n\n***\n\n### View\n\nAPI for the `View` class.\n\n### [View](lib/view.js#L27)\n\nCreate an instance of `View`. Optionally pass a default object to use.\n\n**Params**\n\n* `view` **{Object}**\n\n**Example**\n\n```js\nvar view = new View({\n  path: 'foo.html',\n  content: '...'\n});\n```\n\n### [.context](lib/view.js#L56)\n\nCreates a context object from front-matter data, `view.locals` and the given `locals` object.\n\n**Params**\n\n* `locals` **{Object}**: Optionally pass locals to the engine.\n* `returns` **{Object}**: Returns the context object.\n\n**Example**\n\n```js\nvar ctx = page.context({foo: 'bar'});\n```\n\n### [.compile](lib/view.js#L78)\n\nSynchronously compile a view.\n\n**Params**\n\n* `locals` **{Object}**: Optionally pass locals to the engine.\n* `returns` **{Object}** `View`: instance, for chaining.\n\n**Example**\n\n```js\nvar view = page.compile();\nview.fn({title: 'A'});\nview.fn({title: 'B'});\nview.fn({title: 'C'});\n```\n\n### [.render](lib/view.js#L96)\n\nAsynchronously render a view.\n\n**Params**\n\n* `locals` **{Object}**: Optionally pass locals to the engine.\n* `returns` **{Object}** `View`: instance, for chaining.\n\n**Example**\n\n```js\nview.render({title: 'Home'}, function(err, res) {\n  //=> view object with rendered `content`\n});\n```\n\n### [.isType](lib/view.js#L130)\n\nReturn true if the view is the given view `type`. Since types are assigned by collections, views that are \"collection-less\" will not have a type, and thus will always return `false` (as expected).\n\n**Params**\n\n* `type` **{String}**: (`renderable`, `partial`, `layout`)\n\n**Example**\n\n```js\nview.isType('partial');\n```\n\n### [.data](lib/plugins/context.js#L42)\n\nSet, get and load data to be passed to templates as context at render-time.\n\n**Params**\n\n* `key` **{String|Object}**: Pass a key-value pair or an object to set.\n* `val` **{any}**: Any value when a key-value pair is passed. This can also be options if a glob pattern is passed as the first value.\n* `returns` **{Object}**: Returns an instance of `Templates` for chaining.\n\n**Example**\n\n```js\napp.data('a', 'b');\napp.data({c: 'd'});\nconsole.log(app.cache.data);\n//=> {a: 'b', c: 'd'}\n```\n\n### [.context](lib/plugins/context.js#L62)\n\nBuild the context for the given `view` and `locals`.\n\n**Params**\n\n* `view` **{Object}**: The view being rendered\n* `locals` **{Object}**\n* `returns` **{Object}**: The object to be passed to engines/views as context.\n\n### [setHelperOptions](lib/plugins/context.js#L116)\n\nUpdate context in a helper so that `this.helper.options` is\nthe options for that specific helper.\n\n**Params**\n\n* `context` **{Object}**\n* `key` **{String}**\n\n### [.mergePartials](lib/plugins/context.js#L238)\n\nMerge \"partials\" view types. This is necessary for template\nengines have no support for partials or only support one\ntype of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `returns` **{Object}**: Merged partials\n\n### [.mergePartialsAsync](lib/plugins/context.js#L278)\n\nMerge \"partials\" view types. This is necessary for template engines\nhave no support for partials or only support one type of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `callback` **{Function}**: Function that exposes `err` and `partials` parameters\n\n***\n\n### Item\n\nAPI for the `Item` class.\n\n### [Item](lib/item.js#L28)\n\nCreate an instance of `Item`. Optionally pass a default object to use.\n\n**Params**\n\n* `item` **{Object}**\n\n**Example**\n\n```js\nvar item = new Item({\n  path: 'foo.html',\n  content: '...'\n});\n```\n\n### [.clone](lib/item.js#L92)\n\nRe-decorate Item methods after calling vinyl's `.clone()` method.\n\n**Params**\n\n* `options` **{Object}**\n* `returns` **{Object}** `item`: Cloned instance\n\n**Example**\n\n```js\nitem.clone({deep: true}); // false by default\n```\n\n### [.data](lib/plugins/context.js#L42)\n\nSet, get and load data to be passed to templates as context at render-time.\n\n**Params**\n\n* `key` **{String|Object}**: Pass a key-value pair or an object to set.\n* `val` **{any}**: Any value when a key-value pair is passed. This can also be options if a glob pattern is passed as the first value.\n* `returns` **{Object}**: Returns an instance of `Templates` for chaining.\n\n**Example**\n\n```js\napp.data('a', 'b');\napp.data({c: 'd'});\nconsole.log(app.cache.data);\n//=> {a: 'b', c: 'd'}\n```\n\n### [.context](lib/plugins/context.js#L62)\n\nBuild the context for the given `view` and `locals`.\n\n**Params**\n\n* `view` **{Object}**: The view being rendered\n* `locals` **{Object}**\n* `returns` **{Object}**: The object to be passed to engines/views as context.\n\n### [setHelperOptions](lib/plugins/context.js#L116)\n\nUpdate context in a helper so that `this.helper.options` is\nthe options for that specific helper.\n\n**Params**\n\n* `context` **{Object}**\n* `key` **{String}**\n\n### [.mergePartials](lib/plugins/context.js#L238)\n\nMerge \"partials\" view types. This is necessary for template\nengines have no support for partials or only support one\ntype of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `returns` **{Object}**: Merged partials\n\n### [.mergePartialsAsync](lib/plugins/context.js#L278)\n\nMerge \"partials\" view types. This is necessary for template engines\nhave no support for partials or only support one type of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `callback` **{Function}**: Function that exposes `err` and `partials` parameters\n\n***\n\n### Views\n\nAPI for the `Views` class.\n\n### [Views](lib/views.js#L27)\n\nCreate an instance of `Views` with the given `options`.\n\n**Params**\n\n* `options` **{Object}**\n\n**Example**\n\n```js\nvar collection = new Views();\ncollection.addView('foo', {content: 'bar'});\n```\n\n### [.setView](lib/views.js#L137)\n\nSet a view on the collection. This is identical to [addView](#addView) except `setView` does not emit an event for each view.\n\n**Params**\n\n* `key` **{String|Object}**: View key or object\n* `value` **{Object}**: If key is a string, value is the view object.\n* `returns` **{Object}**: returns the `view` instance.\n\n**Example**\n\n```js\ncollection.setView('foo', {content: 'bar'});\n```\n\n### [.addView](lib/views.js#L184)\n\nSimilar to [setView](#setView), adds a view to the collection but also fires an event and iterates over the loading `queue` for loading views from the `addView` event listener. If the given view is not already an instance of `View`, it will be converted to one before being added to the `views` object.\n\n**Params**\n\n* `key` **{String}**\n* `value` **{Object}**\n* `returns` **{Object}**: Returns the instance of the created `View` to allow chaining view methods.\n\n**Example**\n\n```js\nvar views = new Views(...);\nviews.addView('a.html', {path: 'a.html', contents: '...'});\n```\n\n### [.deleteView](lib/views.js#L207)\n\nDelete a view from collection `views`.\n\n**Params**\n\n* `key` **{String}**\n* `returns` **{Object}**: Returns the instance for chaining\n\n**Example**\n\n```js\nviews.deleteView('foo.html');\n```\n\n### [.addViews](lib/views.js#L231)\n\nLoad multiple views onto the collection.\n\n**Params**\n\n* `views` **{Object|Array}**\n* `returns` **{Object}**: returns the `collection` object\n\n**Example**\n\n```js\ncollection.addViews({\n  'a.html': {content: '...'},\n  'b.html': {content: '...'},\n  'c.html': {content: '...'}\n});\n```\n\n### [.addList](lib/views.js#L265)\n\nLoad an array of views onto the collection.\n\n**Params**\n\n* `list` **{Array}**\n* `returns` **{Object}**: returns the `views` instance\n\n**Example**\n\n```js\ncollection.addList([\n  {path: 'a.html', content: '...'},\n  {path: 'b.html', content: '...'},\n  {path: 'c.html', content: '...'}\n]);\n```\n\n### [.groupBy](lib/views.js#L302)\n\nGroup all collection `views` by the given property, properties or compare functions. See [group-array](https://github.com/doowb/group-array) for the full range of available features and options.\n\n* `returns` **{Object}**: Returns an object of grouped views.\n\n**Example**\n\n```js\nvar collection = new Collection();\ncollection.addViews(...);\nvar groups = collection.groupBy('data.date', 'data.slug');\n```\n\n### [.getView](lib/views.js#L319)\n\nGet view `name` from `collection.views`.\n\n**Params**\n\n* `key` **{String}**: Key of the view to get.\n* `fn` **{Function}**: Optionally pass a function to modify the key.\n* `returns` **{Object}**\n\n**Example**\n\n```js\ncollection.getView('a.html');\n```\n\n### [.extendView](lib/views.js#L354)\n\nLoad a view from the file system.\n\n**Params**\n\n* `view` **{Object}**\n* `returns` **{Object}**\n\n**Example**\n\n```js\ncollection.loadView(view);\n```\n\n### [.isType](lib/views.js#L369)\n\nReturn true if the collection belongs to the given view `type`.\n\n**Params**\n\n* `type` **{String}**: (`renderable`, `partial`, `layout`)\n\n**Example**\n\n```js\ncollection.isType('partial');\n```\n\n### [.viewTypes](lib/views.js#L416)\n\nAlias for `viewType`\n\n### [.data](lib/plugins/context.js#L42)\n\nSet, get and load data to be passed to templates as context at render-time.\n\n**Params**\n\n* `key` **{String|Object}**: Pass a key-value pair or an object to set.\n* `val` **{any}**: Any value when a key-value pair is passed. This can also be options if a glob pattern is passed as the first value.\n* `returns` **{Object}**: Returns an instance of `Templates` for chaining.\n\n**Example**\n\n```js\napp.data('a', 'b');\napp.data({c: 'd'});\nconsole.log(app.cache.data);\n//=> {a: 'b', c: 'd'}\n```\n\n### [.context](lib/plugins/context.js#L62)\n\nBuild the context for the given `view` and `locals`.\n\n**Params**\n\n* `view` **{Object}**: The view being rendered\n* `locals` **{Object}**\n* `returns` **{Object}**: The object to be passed to engines/views as context.\n\n### [setHelperOptions](lib/plugins/context.js#L116)\n\nUpdate context in a helper so that `this.helper.options` is\nthe options for that specific helper.\n\n**Params**\n\n* `context` **{Object}**\n* `key` **{String}**\n\n### [.mergePartials](lib/plugins/context.js#L238)\n\nMerge \"partials\" view types. This is necessary for template\nengines have no support for partials or only support one\ntype of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `returns` **{Object}**: Merged partials\n\n### [.mergePartialsAsync](lib/plugins/context.js#L278)\n\nMerge \"partials\" view types. This is necessary for template engines\nhave no support for partials or only support one type of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `callback` **{Function}**: Function that exposes `err` and `partials` parameters\n\n***\n\n### [.find](lib/plugins/lookup.js#L25)\n\nFind a view by `name`, optionally passing a `collection` to limit the search. If no collection is passed all `renderable` collections will be searched.\n\n**Params**\n\n* `name` **{String}**: The name/key of the view to find\n* `colleciton` **{String}**: Optionally pass a collection name (e.g. pages)\n* `returns` **{Object|undefined}**: Returns the view if found, or `undefined` if not.\n\n**Example**\n\n```js\nvar page = app.find('my-page.hbs');\n\n// optionally pass a collection name as the second argument\nvar page = app.find('my-page.hbs', 'pages');\n```\n\n### [.getView](lib/plugins/lookup.js#L69)\n\nGet view `key` from the specified `collection`.\n\n**Params**\n\n* `collection` **{String}**: Collection name, e.g. `pages`\n* `key` **{String}**: Template name\n* `fn` **{Function}**: Optionally pass a `renameKey` function\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar view = app.getView('pages', 'a/b/c.hbs');\n\n// optionally pass a `renameKey` function to modify the lookup\nvar view = app.getView('pages', 'a/b/c.hbs', function(fp) {\n  return path.basename(fp);\n});\n```\n\n### [.getViews](lib/plugins/lookup.js#L103)\n\nGet all views from a `collection` using the collection's singular or plural name.\n\n**Params**\n\n* `name` **{String}**: The collection name, e.g. `pages` or `page`\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar pages = app.getViews('pages');\n//=> { pages: {'home.hbs': { ... }}\n\nvar posts = app.getViews('posts');\n//=> { posts: {'2015-10-10.md': { ... }}\n```\n\n***\n\n### Collections\n\nAPI for the `Collections` class.\n\n### [Collection](lib/collection.js#L25)\n\nCreate an instance of `Collection` with the given `options`.\n\n**Params**\n\n* `options` **{Object}**\n\n**Example**\n\n```js\nvar collection = new Collection();\ncollection.addItem('foo', {content: 'bar'});\n```\n\n### [.setItem](lib/collection.js#L96)\n\nSet an item on the collection. This is identical to [addItem](#addItem) except `setItem` does not emit an event for each item and does not iterate over the item `queue`.\n\n**Params**\n\n* `key` **{String|Object}**: Item key or object\n* `value` **{Object}**: If key is a string, value is the item object.\n* `returns` **{Object}**: returns the `item` instance.\n\n**Example**\n\n```js\ncollection.setItem('foo', {content: 'bar'});\n```\n\n### [.addItem](lib/collection.js#L119)\n\nSimilar to `setItem`, adds an item to the collection but also fires an event and iterates over the item `queue` to load items from the `addItem` event listener.  An item may be an instance of `Item`, if not, the item is converted to an instance of `Item`.\n\n**Params**\n\n* `key` **{String}**\n* `value` **{Object}**\n\n**Example**\n\n```js\nvar list = new List(...);\nlist.addItem('a.html', {path: 'a.html', contents: '...'});\n```\n\n### [.deleteItem](lib/collection.js#L143)\n\nDelete an item from collection `items`.\n\n**Params**\n\n* `key` **{String}**\n* `returns` **{Object}**: Returns the instance for chaining\n\n**Example**\n\n```js\nitems.deleteItem('abc');\n```\n\n### [.addItems](lib/collection.js#L166)\n\nLoad multiple items onto the collection.\n\n**Params**\n\n* `items` **{Object|Array}**\n* `returns` **{Object}**: returns the instance for chaining\n\n**Example**\n\n```js\ncollection.addItems({\n  'a.html': {content: '...'},\n  'b.html': {content: '...'},\n  'c.html': {content: '...'}\n});\n```\n\n### [.addList](lib/collection.js#L193)\n\nLoad an array of items onto the collection.\n\n**Params**\n\n* `items` **{Array}**: or an instance of `List`\n* `fn` **{Function}**: Optional sync callback function that is called on each item.\n* `returns` **{Object}**: returns the Collection instance for chaining\n\n**Example**\n\n```js\ncollection.addList([\n  {path: 'a.html', content: '...'},\n  {path: 'b.html', content: '...'},\n  {path: 'c.html', content: '...'}\n]);\n```\n\n### [.getItem](lib/collection.js#L224)\n\nGet an item from the collection.\n\n**Params**\n\n* `key` **{String}**: Key of the item to get.\n* `returns` **{Object}**\n\n**Example**\n\n```js\ncollection.getItem('a.html');\n```\n\n### [.data](lib/plugins/context.js#L42)\n\nSet, get and load data to be passed to templates as context at render-time.\n\n**Params**\n\n* `key` **{String|Object}**: Pass a key-value pair or an object to set.\n* `val` **{any}**: Any value when a key-value pair is passed. This can also be options if a glob pattern is passed as the first value.\n* `returns` **{Object}**: Returns an instance of `Templates` for chaining.\n\n**Example**\n\n```js\napp.data('a', 'b');\napp.data({c: 'd'});\nconsole.log(app.cache.data);\n//=> {a: 'b', c: 'd'}\n```\n\n### [.context](lib/plugins/context.js#L62)\n\nBuild the context for the given `view` and `locals`.\n\n**Params**\n\n* `view` **{Object}**: The view being rendered\n* `locals` **{Object}**\n* `returns` **{Object}**: The object to be passed to engines/views as context.\n\n### [setHelperOptions](lib/plugins/context.js#L116)\n\nUpdate context in a helper so that `this.helper.options` is\nthe options for that specific helper.\n\n**Params**\n\n* `context` **{Object}**\n* `key` **{String}**\n\n### [.mergePartials](lib/plugins/context.js#L238)\n\nMerge \"partials\" view types. This is necessary for template\nengines have no support for partials or only support one\ntype of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `returns` **{Object}**: Merged partials\n\n### [.mergePartialsAsync](lib/plugins/context.js#L278)\n\nMerge \"partials\" view types. This is necessary for template engines\nhave no support for partials or only support one type of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `callback` **{Function}**: Function that exposes `err` and `partials` parameters\n\n***\n\n### List\n\nAPI for the `List` class.\n\n### [List](lib/list.js#L31)\n\nCreate an instance of `List` with the given `options`. Lists differ from collections in that items are stored as an array, allowing items to be paginated, sorted, and grouped.\n\n**Params**\n\n* `options` **{Object}**\n\n**Example**\n\n```js\nvar list = new List();\nlist.addItem('foo', {content: 'bar'});\n```\n\n### [.setItem](lib/list.js#L123)\n\nSet an item on the collection. This is identical to [addItem](#addItem) except `setItem` does not emit an event for each item and does not iterate over the item `queue`.\n\n**Params**\n\n* `key` **{String|Object}**: Item key or object\n* `value` **{Object}**: If key is a string, value is the item object.\n* `returns` **{Object}**: returns the `item` instance.\n\n**Example**\n\n```js\ncollection.setItem('foo', {content: 'bar'});\n```\n\n### [.addItem](lib/list.js#L160)\n\nSimilar to [setItem](#setItem), adds an item to the list but also fires an event and iterates over the item `queue` to load items from the `addItem` event listener. If the given item is not already an instance of `Item`, it will be converted to one before being added to the `items` object.\n\n**Params**\n\n* `key` **{String}**\n* `value` **{Object}**\n* `returns` **{Object}**: Returns the instance of the created `Item` to allow chaining item methods.\n\n**Example**\n\n```js\nvar items = new Items(...);\nitems.addItem('a.html', {path: 'a.html', contents: '...'});\n```\n\n### [.addItems](lib/list.js#L187)\n\nLoad multiple items onto the collection.\n\n**Params**\n\n* `items` **{Object|Array}**\n* `returns` **{Object}**: returns the instance for chaining\n\n**Example**\n\n```js\ncollection.addItems({\n  'a.html': {content: '...'},\n  'b.html': {content: '...'},\n  'c.html': {content: '...'}\n});\n```\n\n### [.addList](lib/list.js#L216)\n\nLoad an array of items or the items from another instance of `List`.\n\n**Params**\n\n* `items` **{Array}**: or an instance of `List`\n* `fn` **{Function}**: Optional sync callback function that is called on each item.\n* `returns` **{Object}**: returns the List instance for chaining\n\n**Example**\n\n```js\nvar foo = new List(...);\nvar bar = new List(...);\nbar.addList(foo);\n```\n\n### [.hasItem](lib/list.js#L253)\n\nReturn true if the list has the given item (name).\n\n**Params**\n\n* `key` **{String}**\n* `returns` **{Object}**\n\n**Example**\n\n```js\nlist.addItem('foo.html', {content: '...'});\nlist.hasItem('foo.html');\n//=> true\n```\n\n### [.getIndex](lib/list.js#L269)\n\nGet a the index of a specific item from the list by `key`.\n\n**Params**\n\n* `key` **{String}**\n* `returns` **{Object}**\n\n**Example**\n\n```js\nlist.getIndex('foo.html');\n//=> 1\n```\n\n### [.getItem](lib/list.js#L313)\n\nGet a specific item from the list by `key`.\n\n**Params**\n\n* `key` **{String}**: The item name/key.\n* `returns` **{Object}**\n\n**Example**\n\n```js\nlist.getItem('foo.html');\n//=> '<Item <foo.html>>'\n```\n\n### [.getView](lib/list.js#L332)\n\nProxy for `getItem`\n\n**Params**\n\n* `key` **{String}**: Pass the key of the `item` to get.\n* `returns` **{Object}**\n\n**Example**\n\n```js\nlist.getItem('foo.html');\n//=> '<Item \"foo.html\" <buffer e2 e2 e2>>'\n```\n\n### [.deleteItem](lib/list.js#L346)\n\nRemove an item from the list.\n\n**Params**\n\n* `key` **{Object|String}**: Pass an `item` instance (object) or `item.key` (string).\n\n**Example**\n\n```js\nlist.deleteItem('a.html');\n```\n\n### [.extendItem](lib/list.js#L365)\n\nDecorate each item on the list with additional methods\nand properties. This provides a way of easily overriding\ndefaults.\n\n**Params**\n\n* `item` **{Object}**\n* `returns` **{Object}**: Instance of item for chaining\n\n### [.groupBy](lib/list.js#L384)\n\nGroup all list `items` using the given property, properties or compare functions. See [group-array](https://github.com/doowb/group-array) for the full range of available features and options.\n\n* `returns` **{Object}**: Returns the grouped items.\n\n**Example**\n\n```js\nvar list = new List();\nlist.addItems(...);\nvar groups = list.groupBy('data.date', 'data.slug');\n```\n\n### [.sortBy](lib/list.js#L410)\n\nSort all list `items` using the given property, properties or compare functions. See [array-sort](https://github.com/jonschlinkert/array-sort) for the full range of available features and options.\n\n* `returns` **{Object}**: Returns a new `List` instance with sorted items.\n\n**Example**\n\n```js\nvar list = new List();\nlist.addItems(...);\nvar result = list.sortBy('data.date');\n//=> new sorted list\n```\n\n### [.paginate](lib/list.js#L458)\n\nPaginate all `items` in the list with the given options, See [paginationator](https://github.com/doowb/paginationator) for the full range of available features and options.\n\n* `returns` **{Object}**: Returns the paginated items.\n\n**Example**\n\n```js\nvar list = new List(items);\nvar pages = list.paginate({limit: 5});\n```\n\n### [.data](lib/plugins/context.js#L42)\n\nSet, get and load data to be passed to templates as context at render-time.\n\n**Params**\n\n* `key` **{String|Object}**: Pass a key-value pair or an object to set.\n* `val` **{any}**: Any value when a key-value pair is passed. This can also be options if a glob pattern is passed as the first value.\n* `returns` **{Object}**: Returns an instance of `Templates` for chaining.\n\n**Example**\n\n```js\napp.data('a', 'b');\napp.data({c: 'd'});\nconsole.log(app.cache.data);\n//=> {a: 'b', c: 'd'}\n```\n\n### [.context](lib/plugins/context.js#L62)\n\nBuild the context for the given `view` and `locals`.\n\n**Params**\n\n* `view` **{Object}**: The view being rendered\n* `locals` **{Object}**\n* `returns` **{Object}**: The object to be passed to engines/views as context.\n\n### [setHelperOptions](lib/plugins/context.js#L116)\n\nUpdate context in a helper so that `this.helper.options` is\nthe options for that specific helper.\n\n**Params**\n\n* `context` **{Object}**\n* `key` **{String}**\n\n### [.mergePartials](lib/plugins/context.js#L238)\n\nMerge \"partials\" view types. This is necessary for template\nengines have no support for partials or only support one\ntype of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `returns` **{Object}**: Merged partials\n\n### [.mergePartialsAsync](lib/plugins/context.js#L278)\n\nMerge \"partials\" view types. This is necessary for template engines\nhave no support for partials or only support one type of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `callback` **{Function}**: Function that exposes `err` and `partials` parameters\n\n***\n\n### Group\n\nAPI for the `Group` class.\n\n### [Group](lib/group.js#L25)\n\nCreate an instance of `Group` with the given `options`.\n\n**Params**\n\n* `options` **{Object}**\n\n**Example**\n\n```js\nvar group = new Group({\n  'foo': { items: [1,2,3] }\n});\n```\n\n***\n\n### [.find](lib/plugins/lookup.js#L25)\n\nFind a view by `name`, optionally passing a `collection` to limit the search. If no collection is passed all `renderable` collections will be searched.\n\n**Params**\n\n* `name` **{String}**: The name/key of the view to find\n* `colleciton` **{String}**: Optionally pass a collection name (e.g. pages)\n* `returns` **{Object|undefined}**: Returns the view if found, or `undefined` if not.\n\n**Example**\n\n```js\nvar page = app.find('my-page.hbs');\n\n// optionally pass a collection name as the second argument\nvar page = app.find('my-page.hbs', 'pages');\n```\n\n### [.getView](lib/plugins/lookup.js#L69)\n\nGet view `key` from the specified `collection`.\n\n**Params**\n\n* `collection` **{String}**: Collection name, e.g. `pages`\n* `key` **{String}**: Template name\n* `fn` **{Function}**: Optionally pass a `renameKey` function\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar view = app.getView('pages', 'a/b/c.hbs');\n\n// optionally pass a `renameKey` function to modify the lookup\nvar view = app.getView('pages', 'a/b/c.hbs', function(fp) {\n  return path.basename(fp);\n});\n```\n\n### [.getViews](lib/plugins/lookup.js#L103)\n\nGet all views from a `collection` using the collection's singular or plural name.\n\n**Params**\n\n* `name` **{String}**: The collection name, e.g. `pages` or `page`\n* `returns` **{Object}**\n\n**Example**\n\n```js\nvar pages = app.getViews('pages');\n//=> { pages: {'home.hbs': { ... }}\n\nvar posts = app.getViews('posts');\n//=> { posts: {'2015-10-10.md': { ... }}\n```\n\n***\n\n### [.compile](lib/plugins/render.js#L91)\n\nCompile `content` with the given `locals`.\n\n**Params**\n\n* `view` **{Object|String}**: View object.\n* `locals` **{Object}**\n* `isAsync` **{Boolean}**: Load async helpers\n* `returns` **{Object}**: View object with compiled `view.fn` property.\n\n**Example**\n\n```js\nvar indexPage = app.page('some-index-page.hbs');\nvar view = app.compile(indexPage);\n// view.fn => [function]\n\n// you can call the compiled function more than once\n// to render the view with different data\nview.fn({title: 'Foo'});\nview.fn({title: 'Bar'});\nview.fn({title: 'Baz'});\n```\n\n### [.compileAsync](lib/plugins/render.js#L165)\n\nAsynchronously compile `content` with the given `locals` and callback.\n\n**Params**\n\n* `view` **{Object|String}**: View object.\n* `locals` **{Object}**\n* `isAsync` **{Boolean}**: Pass true to load helpers as async (mostly used internally)\n* `callback` **{Function}**: function that exposes `err` and the `view` object with compiled `view.fn` property\n\n**Example**\n\n```js\nvar indexPage = app.page('some-index-page.hbs');\napp.compileAsync(indexPage, function(err, view) {\n  // view.fn => compiled function\n});\n```\n\n### [.render](lib/plugins/render.js#L252)\n\nRender a view with the given `locals` and `callback`.\n\n**Params**\n\n* `view` **{Object|String}**: Instance of `View`\n* `locals` **{Object}**: Locals to pass to template engine.\n* `callback` **{Function}**\n\n**Example**\n\n```js\nvar blogPost = app.post.getView('2015-09-01-foo-bar');\napp.render(blogPost, {title: 'Foo'}, function(err, view) {\n  // `view` is an object with a rendered `content` property\n});\n```\n\n***\n\n### [.data](lib/plugins/context.js#L42)\n\nSet, get and load data to be passed to templates as context at render-time.\n\n**Params**\n\n* `key` **{String|Object}**: Pass a key-value pair or an object to set.\n* `val` **{any}**: Any value when a key-value pair is passed. This can also be options if a glob pattern is passed as the first value.\n* `returns` **{Object}**: Returns an instance of `Templates` for chaining.\n\n**Example**\n\n```js\napp.data('a', 'b');\napp.data({c: 'd'});\nconsole.log(app.cache.data);\n//=> {a: 'b', c: 'd'}\n```\n\n### [.context](lib/plugins/context.js#L62)\n\nBuild the context for the given `view` and `locals`.\n\n**Params**\n\n* `view` **{Object}**: The view being rendered\n* `locals` **{Object}**\n* `returns` **{Object}**: The object to be passed to engines/views as context.\n\n### [setHelperOptions](lib/plugins/context.js#L116)\n\nUpdate context in a helper so that `this.helper.options` is\nthe options for that specific helper.\n\n**Params**\n\n* `context` **{Object}**\n* `key` **{String}**\n\n### [.mergePartials](lib/plugins/context.js#L238)\n\nMerge \"partials\" view types. This is necessary for template\nengines have no support for partials or only support one\ntype of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `returns` **{Object}**: Merged partials\n\n### [.mergePartialsAsync](lib/plugins/context.js#L278)\n\nMerge \"partials\" view types. This is necessary for template engines\nhave no support for partials or only support one type of partials.\n\n**Params**\n\n* `options` **{Object}**: Optionally pass an array of `viewTypes` to include on `options.viewTypes`\n* `callback` **{Function}**: Function that exposes `err` and `partials` parameters\n\n***\n\n### [.handle](lib/plugins/routes.js#L46)\n\nHandle a middleware `method` for `view`.\n\n**Params**\n\n* `method` **{String}**: Name of the router method to handle. See [router methods](./docs/router.md)\n* `view` **{Object}**: View object\n* `callback` **{Function}**: Callback function\n* `returns` **{Object}**\n\n**Example**\n\n```js\napp.handle('customMethod', view, callback);\n```\n\n### [.handleView](lib/plugins/routes.js#L111)\n\nDeprecated, use `.handleOnce`\n\n### [.route](lib/plugins/routes.js#L161)\n\nCreate a new Route for the given path. Each route contains a separate middleware stack.\n\nSee the [route API documentation][route-api] for details on\nadding handlers and middleware to routes.\n\n**Params**\n\n* `path` **{String}**\n* `returns` **{Object}** `Route`: for chaining\n\n**Example**\n\n```js\napp.create('posts');\napp.route(/blog/)\n  .all(function(view, next) {\n    // do something with view\n    next();\n  });\n\napp.post('whatever', {path: 'blog/foo.bar', content: 'bar baz'});\n```\n\n### [.all](lib/plugins/routes.js#L183)\n\nSpecial route method that works just like the `router.METHOD()` methods, except that it matches all verbs.\n\n**Params**\n\n* `path` **{String}**\n* `callback` **{Function}**\n* `returns` **{Object}** `this`: for chaining\n\n**Example**\n\n```js\napp.all(/\\.hbs$/, function(view, next) {\n  // do stuff to view\n  next();\n});\n```\n\n### [.param](lib/plugins/routes.js#L212)\n\nAdd callback triggers to route parameters, where `name` is the name of the parameter and `fn` is the callback function.\n\n**Params**\n\n* `name` **{String}**\n* `fn` **{Function}**\n* `returns` **{Object}**: Returns the instance of `Templates` for chaining.\n\n**Example**\n\n```js\napp.param('title', function(view, next, title) {\n  //=> title === 'foo.js'\n  next();\n});\n\napp.onLoad('/blog/:title', function(view, next) {\n  //=> view.path === '/blog/foo.js'\n  next();\n});\n```\n\n***\n\n### [.isApp](lib/plugins/is.js#L33)\n\nStatic method that returns true if the given value is a `templates` instance (`App`).\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar app = templates();\n\ntemplates.isApp(templates);\n//=> false\n\ntemplates.isApp(app);\n//=> true\n```\n\n### [.isCollection](lib/plugins/is.js#L55)\n\nStatic method that returns true if the given value is a templates `Collection` instance.\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar app = templates();\n\napp.create('pages');\ntemplates.isCollection(app.pages);\n//=> true\n```\n\n### [.isViews](lib/plugins/is.js#L77)\n\nStatic method that returns true if the given value is a templates `Views` instance.\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar app = templates();\n\napp.create('pages');\ntemplates.isViews(app.pages);\n//=> true\n```\n\n### [.isList](lib/plugins/is.js#L100)\n\nStatic method that returns true if the given value is a templates `List` instance.\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar List = templates.List;\nvar app = templates();\n\nvar list = new List();\ntemplates.isList(list);\n//=> true\n```\n\n### [.isGroup](lib/plugins/is.js#L123)\n\nStatic method that returns true if the given value is a templates `Group` instance.\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar Group = templates.Group;\nvar app = templates();\n\nvar group = new Group();\ntemplates.isGroup(group);\n//=> true\n```\n\n### [.isView](lib/plugins/is.js#L148)\n\nStatic method that returns true if the given value is a templates `View` instance.\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar app = templates();\n\ntemplates.isView('foo');\n//=> false\n\nvar view = app.view('foo', {content: '...'});\ntemplates.isView(view);\n//=> true\n```\n\n### [.isItem](lib/plugins/is.js#L173)\n\nStatic method that returns true if the given value is a templates `Item` instance.\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar templates = require('templates');\nvar app = templates();\n\ntemplates.isItem('foo');\n//=> false\n\nvar view = app.view('foo', {content: '...'});\ntemplates.isItem(view);\n//=> true\n```\n\n### [.isVinyl](lib/plugins/is.js#L200)\n\nStatic method that returns true if the given value is a vinyl `File` instance.\n\n**Params**\n\n* `val` **{Object}**: The value to test.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar File = require('vinyl');\nvar templates = require('templates');\nvar app = templates();\n\nvar view = app.view('foo', {content: '...'});\ntemplates.isVinyl(view);\n//=> true\n\nvar file = new File({path: 'foo', contents: new Buffer('...')});\ntemplates.isVinyl(file);\n//=> true\n```\n\n***\n\n## History\n\n### v0.15.0\n\n* removes `.removeItem` method that was deprecated in v0.10.7 from `List`\n* `.handleView` is deprecated in favor of `.handleOnce` and will be removed in a future version. Start using `.handleOnce` now.\n* adds a static `Templates.setup()` method for initializing any setup code that should have access to the instance before any other use code is run.\n* upgrade to [base-data](https://github.com/node-base/base-data) v0.4.0, which adds `app.option.set`, `app.option.get` and `app.option.merge`\n\n### v0.14.0\n\nAlthough 99% of users won't be effected by the changes in this release, there were some **potentially breaking changes**.\n\n* The `render` and `compile` methods were streamlined, making it clear that `.mergePartials` should not have been renamed to `mergePartialsSync`. So that change was reverted.\n* Helper context: Exposes a `this.helper` object to the context in helpers, which has the helper name and options that were set specifically for that helper\n* Helper context: Exposes a `this.view` object to the context in helpers, which is the current view being rendered. This was (and still is) always expose on `this.context.view`, but it makes sense to add this to the root of the context as a convenience. We will deprecate `this.context.view` in a future version.\n* Helper context: `.get`, `.set` and `.merge` methods on `this.options`, `this.context` and the `this` object in helpers.\n\n### v0.11.0\n\n* Default `engine` can now be defined on `app` or a collection using using `app.option('engine')`, `views.option('engine')`\n* Default `layout` can now defined using `app.option('layout')`, `views.option('layout')`. No changes have been made to `view.layout`, it should work as before. Resolves [issue/#818](../../issues/818)\n* Improves logic for finding a layout, this should make layouts easier to define and find going forward.\n* The built-in `view` helper has been refactored completely. The helper is now async and renders the view before returning its content.\n* Adds `isApp`, `isViews`, `isCollection`, `isList`, `isView`, `isGroup`, and `isItem` static methods. All return true when the given value is an instance of the respective class.\n* Adds `deleteItem` method to List and Collection, and `deleteView` method to Views.\n* Last, the static `_.proto` property which is only exposed for unit tests was renamed to `_.plugin`.\n\n### v0.10.7\n\n* Force-update [base](https://github.com/node-base/base) to v0.6.4 to take advantage of `isRegistered` feature.\n\n### v0.10.6\n\n* Re-introduces fs logic to `getView`, now that the method has been refactored to be faster.\n\n### v0.10.0\n\n* `getView` method no longer automatically reads views from the file system. This was undocumented before and, but it's a breaking change nonetheless. The removed functionality can easily be done in a plugin.\n\n### v0.9.5\n\n* Fixes error messages when no engine is found for a view, and the view does not have a file extension.\n\n### v0.9.4\n\n* Fixes a lookup bug in render and compile that was returning the first view that matched the given name from _any_ collection. So if a partial and a page shared the same name, if the partial was matched first it was returned. Now the `renderable` view is rendered (e.g. page)\n\n### v0.9.0\n\n* _breaking change_: changes parameters on `app.context` method. It now only accepts two arguments, `view` and `locals`, since `ctx` (the parameter that was removed) was technically being merged in twice.\n\n### v0.8.0\n\n* Exposes `isType` method on `view`. Shouldn't be any breaking changes.\n\n### v0.7.0\n\n* _breaking change_: renamed `.error` method to `.formatError`\n* adds `mergeContext` option\n* collection name is now emitted with `view` and `item` as the second argument\n* adds `isType` method for checking the `viewType` on a collection\n* also now emits an event with the collection name when a view is created\n\n### v0.5.1\n\n* fixes bug where `default` layout was automatically applied to partials, causing an infinite loop in rare cases.\n\n## Related projects\n\nYou might also be interested in these projects:\n\n* [assemble](https://www.npmjs.com/package/assemble): Assemble is a powerful, extendable and easy to use static site generator for node.js. Used… [more](https://www.npmjs.com/package/assemble) | [homepage](https://github.com/assemble/assemble)\n* [en-route](https://www.npmjs.com/package/en-route): Routing for static site generators, build systems and task runners, heavily based on express.js routes… [more](https://www.npmjs.com/package/en-route) | [homepage](https://github.com/jonschlinkert/en-route)\n* [engine](https://www.npmjs.com/package/engine): Template engine based on Lo-Dash template, but adds features like the ability to register helpers… [more](https://www.npmjs.com/package/engine) | [homepage](https://github.com/jonschlinkert/engine)\n* [layouts](https://www.npmjs.com/package/layouts): Wraps templates with layouts. Layouts can use other layouts and be nested to any depth.… [more](https://www.npmjs.com/package/layouts) | [homepage](https://github.com/doowb/layouts)\n* [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used… [more](https://www.npmjs.com/package/verb) | [homepage](https://github.com/verbose/verb)\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/templates/issues/new).\n\n## Building docs\n\nGenerate readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install verb && npm run docs\n```\n\nOr, if [verb](https://github.com/verbose/verb) is installed globally:\n\n```sh\n$ verb\n```\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/templates/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on May 07, 2016._",
  "readmeFilename": "README.md",
  "_id": "templates@0.17.2",
  "_shasum": "7127ed38a71bd829c797965b4cef06c87f5e9ea6",
  "_from": "git+https://github.com/jonschlinkert/templates.git",
  "_resolved": "git+https://github.com/jonschlinkert/templates.git#b8f521863c361ab45aab8f6e21822a6a2bde1611"
}
